######################################
#           Utility Macros           #
######################################

[dns_data]
definition = datamodel Network_Resolution search | `drop_dm_object_name(DNS)`
iseval = 0

[extract_sub_domain]
definition = rex field=query "^(?<subdomain>.*?)\.(?<domain>[^.]+\.[^.]+)$"
iseval = 0

[update_anomalous_dns]
definition = outputlookup append=true anomalous_dns_lookup
iseval = 0

[lookup_anomalous_dns_general]
definition = lookup anomalous_dns_lookup domain OUTPUT anomalous_type

[lookup_anomalous_dns(1)]
args = anomalous_type
definition = lookup anomalous_dns_lookup domain OUTPUT anomalous_type | where anomalous_type IN ($anomalous_type$)

######################################
#         Global Alert Macro         #
######################################

[alert_dns_global]
definition = `dns_data` | `extract_sub_domain` | stats count as query_count values(record_type) as record_type earliest(_time) as _time by src domain | `lookup_anomalous_dns_general` | table _time src domain query_count record_type anomalous_type
iseval = 0

######################################
#          Beaconing Macro           #
######################################

[setup_dns_beaconing_detection]
definition = `dns_data` | `extract_sub_domain` | streamstats current=f last(_time) as last_time by src, domain | eval gap = last_time - _time | fit DensityFunction gap by "src,domain" dist=norm threshold=0.01 into dns_beacon_gap_model
iseval = 0

[train_dns_beaconing_detection]
definition = `dns_data` | `extract_sub_domain` | streamstats current=f last(_time) as last_time by src, domain | eval gap = last_time - _time | fit DensityFunction gap by "src,domain" into dns_beacon_gap_model partial_fit=true | search src = "dummy_search" | append [| summary dns_beacon_gap_model | search std < 60 NOT std=1e-06] | eval last_update = now(), anomalous_type = "Beaconing", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#        C2 Tunneling Macro          #
######################################

[ad_dns_c2_tunneling_detection]
definition = `dns_data` | fields _time, src, query | `extract_sub_domain` | bin _time span=1m | stats count by _time src domain | anomalydetection "src" "domain" "count" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | eval last_update = now(), anomalous_type = "C2 Tunneling", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#    Query Length Anomalies Macro    #
######################################

[ad_dns_query_length_detection]
definition = `dns_data` | eval query_length = len(query) | where isnotnull(query_length) AND query_length > 0 | fields _time src query query_length | anomalydetection "query_length" "query" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | `extract_sub_domain` | eval last_update = now(), anomalous_type = "Query Length", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#       Domain Shadowing Macro       #
######################################

[ad_dns_domain_shadowing_detection]
definition = `dns_data` | `extract_sub_domain` | where isnotnull(domain) AND subdomain!="" AND isnotnull(subdomain) | stats dc(subdomain) as unique_subdomain by src domain | anomalydetection "src" "unique_subdomain" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | eval last_update = now(), anomalous_type = "Domain Shadowing", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#     TXT Record Anomalies Macro     #
######################################

[ad_dns_txt_record_detection]
definition = `dns_data` | `extract_sub_domain` | bin _time span=1h | stats count(eval(record_type="TXT")) as txt_queries by _time,src,domain | anomalydetection "txt_queries" "domain" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | eval last_update = now(), anomalous_type = "TXT Record Anomalies", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#        ANY Record Anomalies        #
######################################

[dns_any_record_detection]
definition = `dns_data` | `extract_sub_domain` | bin _time span=1h | stats count(eval(record_type="ANY")) as any_queries by _time,src,domain | anomalydetection "any_queries" "domain" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | eval last_update = now(), anomalous_type = "ANY Record Anomalies", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#       HINFO Record Anomalies       #
######################################

[dns_hinfo_record_detection]
definition = `dns_data` | `extract_sub_domain` | bin _time span=1h | stats count(eval(record_type="HINFO")) as hinfo_queries by _time,src,domain | anomalydetection "hinfo_queries" "domain" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | eval last_update = now(), anomalous_type = "HINFO Record Anomalies", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#       AXFR Record Anomalies        #
######################################

[dns_axfr_record_detection]
definition = `dns_data` | `extract_sub_domain` | bin _time span=1h | stats count(eval(record_type="AXFR")) as axfr_queries by _time,src,domain | anomalydetection "axfr_queries" "domain" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | where isOutlier=1 | eval last_update = now(), anomalous_type = "AXFR Record Anomalies", _key = domain ."#". anomalous_type | table _key, last_update, domain, anomalous_type | `update_anomalous_dns`
iseval = 0

######################################
#    Behavioral Clustering Macro     #
######################################

[dns_behavioral_clustering_detection]
definition = `dns_data` | eval query_length = len(query)
| `extract_sub_domain` | streamstats current=f last(_time) as last_time by src, domain | eval gap = last_time - _time | eventstats stdev(gap) as stdev_gap by src, domain
| eventstats dc(subdomain) as distinct_subdomains count(eval(record_type="TXT")) as txt_queries count(eval(record_type="ANY")) as any_queries count(eval(record_type="HINFO")) as hinfo_queries count(eval(record_type="AXFR")) as axfr_queries avg(query_length) as avg_query_len, stdev(query_length) as stdev_query_len max(query_length) as max_query_len by src
| bin _time span=1h
| eventstats count as hourly_query_count by _time, src
| stats avg(hourly_query_count) as avg_query_freq_hourly,
        avg(distinct_subdomains) as avg_distinct_subdomains,
        latest(avg_query_len) as avg_len,
        latest(stdev_query_len) as stdev_len,
        latest(max_query_len) as max_len,
        sum(hourly_query_count) as total_q,
        latest(txt_queries) as txt_q, latest(any_queries) as any_q, latest(hinfo_queries) as hinfo_q, latest(axfr_queries) as axfr_q,
        min(stdev_gap) as beacon_stdev
        by src
| eval txt_ratio = round(coalesce(txt_q,0) / total_q, 4), any_ratio = round(coalesce(any_q,0) / total_q, 4), hinfo_ratio = round(coalesce(hinfo_q,0) / total_q, 4), axfr_ratio = round(coalesce(axfr_q,0) / total_q, 4)
| fillnull value=0 query_freq_hourly, avg_len, stdev_len, max_len, txt_ratio, any_ratio, hinfo_ratio, axfr_ration, beacon_stdev
| fields src, avg_query_freq_hourly, avg_distinct_subdomains, avg_len, stdev_len, max_len, txt_ratio, any_ratio, hinfo_ratio, axfr_ratio, beacon_stdev
| fit KMeans "avg_distinct_subdomains" "avg_query_freq_hourly" "beacon_stdev" "max_len" "txt_ratio" "any_ratio" "hinfo_ratio" "axfr_ratio" k=5 into dns_behavior_clusters
| where cluster <= 0 \
| eval _key = src, last_update = now(), behavioral_clustering = 1 | table _key, last_update, src, beaconing | `update_anomalous_src`
iseval = 0