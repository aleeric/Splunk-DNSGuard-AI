#######################################
#   Volume and Frequency Anomalies    #
#######################################

[ML - DNS Volume and Frequency Anomalies]
disabled = 0
cron_schedule = 15 */6 * * *
description = Detects regular DNS beaconing patterns indicating potential C2 communications by analyzing consistency of query intervals
dispatch.earliest_time = 1
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = Splunk_DNSGuard_AI
request.ui_dispatch_view = search
search = | `ml_dns_volume_frequency_detection`

[Threat - DNS Volume and Frequency Anomalies]
disabled = 0
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 15 */6 * * *
description = Detects regular DNS beaconing patterns indicating potential C2 communications by analyzing consistency of query intervals
dispatch.earliest_time = 1
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = Splunk_DNSGuard_AI
request.ui_dispatch_view = search
search = | `threat_dns_volume_frequency_detection`

############################
#      DNS Beaconing       #
############################

[Threat - DNS Beaconing Detection]
disabled = 0
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 15 */6 * * *
description = Detects regular DNS beaconing patterns indicating potential C2 communications by analyzing consistency of query intervals
dispatch.earliest_time = 1
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = Splunk_DNSGuard_AI
request.ui_dispatch_view = search
search = | `dns_beaconing_detection(60)`



##########################


[DNS_Clustering_Detection]
disabled = 1
action.risk.enabled = 1
action.risk.param._risk_score = 60
action.risk.param._risk_object_type = system
action.risk.param._risk_object = dest_host
action.risk.param._risk_message = Suspicious DNS cluster detected: system $dest_host$ belongs to a suspicious DNS query pattern cluster.
action.risk.param.risk_severity = medium
action.risk.param.risk_object = dest_host
action.risk.param.risk_object_type = system
action.risk.param.risk_score = 60
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 * * * *
description = Groups DNS queries by pattern using clustering algorithms to identify suspicious clusters
dispatch.earliest_time = -1h@h
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
request.ui_dispatch_app = malicious_dns_hunter
request.ui_dispatch_view = search
search = `dns_data` | rename src_ip as src | rename query as dest | `dns_feature_extraction` | fit KMeans k=5 dest_features into dns_clusters | search cluster=1 OR cluster=3 | table _time, src, dest, dest_features, cluster

[DNS_DGA_Domain_Detection]
disabled = 1
action.risk.enabled = 1
action.risk.param._risk_score = 80
action.risk.param._risk_object_type = system
action.risk.param._risk_object = dest_host
action.risk.param._risk_message = Potential DGA domain detected: system $dest_host$ attempted to resolve potential algorithmically generated domain $dest$.
action.risk.param.risk_severity = high
action.risk.param.risk_object = dest_host
action.risk.param.risk_object_type = system
action.risk.param.risk_score = 80
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 * * * *
description = Detects potential Domain Generation Algorithm (DGA) domains using ML classification
dispatch.earliest_time = -1h@h
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
request.ui_dispatch_app = malicious_dns_hunter
request.ui_dispatch_view = search
search = `dns_data` | rename src_ip as src | rename query as dest | `domain_feature_extraction` | apply dga_domain_model | where predicted_class=1 | table _time, src, dest, predicted_class, probability

[DNS_Volume_Anomaly_Detection]
disabled = 1
action.risk.enabled = 1
action.risk.param._risk_score = 65
action.risk.param._risk_object_type = system
action.risk.param._risk_object = dest_host
action.risk.param._risk_message = DNS volume anomaly detected: system $dest_host$ generated unusually high volume of DNS queries.
action.risk.param.risk_severity = medium
action.risk.param.risk_object = dest_host
action.risk.param.risk_object_type = system
action.risk.param.risk_score = 65
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 * * * *
description = Identifies hosts with unusual DNS query volume patterns using time series analysis
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
request.ui_dispatch_app = malicious_dns_hunter
request.ui_dispatch_view = search
search = `dns_data` | rename src_ip as src | rename query as dest | bin _time span=1h | stats count as query_count by _time, src | fit ARIMA query_count by src future_timespan=0 | where query_count > upper95 + 2*std(query_count) | table _time, src, query_count, upper95, "std(query_count)"

[DNS_TXT_Record_Code_Detection]
disabled = 1
action.risk.enabled = 1
action.risk.param._risk_score = 75
action.risk.param._risk_object_type = system
action.risk.param._risk_object = dest_host
action.risk.param._risk_message = Potential C2 DNS TXT record detected: system $dest_host$ queried for TXT records with unusual content.
action.risk.param.risk_severity = high
action.risk.param.risk_object = dest_host
action.risk.param.risk_object_type = system
action.risk.param.risk_score = 75
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 * * * *
description = Detects potential command and control (C2) communication via DNS TXT records
dispatch.earliest_time = -1h@h
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
request.ui_dispatch_app = malicious_dns_hunter
request.ui_dispatch_view = search
search = `dns_data` record_type=TXT | rename src_ip as src | rename query as dest | `extract_txt_content` | fit TFIDF txt_content | rename "TFIDF(txt_content)" as "txt_score" | where txt_score > 0.7 | table _time, src, dest, txt_content, txt_score 




###### backup for future

[DNS Outlier Detection]
disabled = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */60 * * * *
description = Detects unusual DNS queries using ML outlier detection algorithm
dispatch.earliest_time = -90d@d
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = anomalous_dns_hunter_for_splunk
request.ui_dispatch_view = search
search = | `dns_data` \
| anomalydetection "src" "query" action=annotate | eval isOutlier = if(probable_cause != "", "1", "0") | table _time, src, query, probable_cause, isOutlier | sort 100000 probable_cause | where isOutlier = 1 \
| eval isVerified = 0 | rename query as anomalous_dns | fields - probable_cause isOutlier \
|`update_anomalous_dns`